namespace Lab4test
{
    [TestClass]
    public sealed class BlueTest
    {
        Lab4.Blue _main = new Lab4.Blue();
        const double E = 0.0001;

        [TestMethod]
        public void Test01()
        {
            // Arrange
            var input = new int[][] {
                /* 0*/ new int[] {  -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
                /* 1*/ new int[] {  2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
                /* 2*/ new int[] {  2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
                /* 3*/ new int[] {  -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
                /* 4*/ new int[] {  -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
                /* 5*/ new int[] {  0, 0, 0, 0, 0 },
                /* 6*/ new int[] {  1, 1, 1 },
                /* 7*/ new int[] {  -3, -2, -3, -2 },
                /* 8*/ new int[] {  3, 2, 3, 2 },
                /* 9*/ new int[] {  3, -2, -3, 2 },
                /*10*/ new int[] {  -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
                /*11*/ new int[] {  1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
                /*12*/ new int[] {  1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
                /*13*/ new int[] {  0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
                /*14*/ new int[] {  5 }
            };
            var answer = new int[][] {
                /* 0*/ new int[] { 18, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
                /* 1*/ new int[] { 2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
                /* 2*/ new int[] { 2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
                /* 3*/ new int[] { -86, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
                /* 4*/ new int[] { -77, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
                /* 5*/ new int[] { 0, 0, 0, 0, 0 },
                /* 6*/ new int[] { 1, 1, 1 },
                /* 7*/ new int[] { -5, -2, -3, -2 },
                /* 8*/ new int[] { 3, 2, 3, 2 },
                /* 9*/ new int[] { 3, -3, -3, 2 },
                /*10*/ new int[] { -14, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
                /*11*/ new int[] { 1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
                /*12*/ new int[] { 1, 2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
                /*13*/ new int[] { 0, 8, 15, 15, 15, -9, -15, -8, 2, -3 },
                /*14*/ new int[] { 5 }
            };
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                _main.Task1(input[i]);
            }
            // Assert
            for (int i = 0; i < answer.Length; i++)
            {
                Assert.AreEqual(answer[i].Length, input[i].Length);
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], input[i][j], $"Test No {i}, index = {j}");
                }
            }
        }
        [TestMethod]
        public void Test02()
        {
            // Arrange
            var input = new int[][] {
                 /* 0*/ new int[] {  -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
                 /* 1*/ new int[] {  2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
                 /* 2*/ new int[] {  2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
                 /* 3*/ new int[] {  -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
                 /* 4*/ new int[] {  -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
                 /* 5*/ new int[] {  0, 0, 0, 0, 0 },
                 /* 6*/ new int[] {  1, 1, 1 },
                 /* 7*/ new int[] {  -3, -2, -3, -2 },
                 /* 8*/ new int[] {  3, 2, 3, 2 },
                 /* 9*/ new int[] {  3, -2, -3, 2 },
                 /*10*/ new int[] {  -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
                 /*11*/ new int[] {  1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, -3, -3 },
                 /*12*/ new int[] {  1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, -3 },
                 /*13*/ new int[] {  0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
                 /*14*/ new int[] {  5 }
            };
            var inputP = new int[] { 12, 38, 71, 12, 65, 87, 33, 33, 26, 9, -11, -62, -1, 39, 25 };
            var answer = new int[][] {
                 /* 0*/ new int[] { -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3, 12 },
                 /* 1*/ new int[] { 2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3, 38 },
                 /* 2*/ new int[] { 2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3, 71 },
                 /* 3*/ new int[] { -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
                 /* 4*/ new int[] { -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
                 /* 5*/ new int[] { 0, 0, 0, 0, 0 },
                 /* 6*/ new int[] { 1, 1, 1, 33 },
                 /* 7*/ new int[] { -3, -2, -3, -2 },
                 /* 8*/ new int[] { 3, 2, 3, 2, 26 },
                 /* 9*/ new int[] { 3, -2, -3, 2, 9 },
                 /*10*/ new int[] { -2, 88, 5, 3, 1, 1, 15, -8, 2, -11, -33 },
                 /*11*/ new int[] { 1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, -62, -3, -3 },
                 /*12*/ new int[] { 1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, -1, -3 },
                 /*13*/ new int[] { 0, 8, 15, 15, 15, -15, -15, -8, 2, 39, -3 },
                 /*14*/ new int[] { 5, 25 }
            };
            var test = new int[answer.Length][];
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                test[i] = _main.Task2(input[i], inputP[i]);
            }
            // Assert
            Assert.AreNotEqual(input, test);
            for (int i = 0; i < answer.Length; i++)
            {
                Assert.AreEqual(answer[i].Length, test[i].Length, $"Test {i}");
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], test[i][j], $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test03()
        {
            // Arrange
            var input = new int[][] {
              new int[] {  -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
              new int[] {  2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new int[] {  2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new int[] {  -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new int[] {  -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new int[] {  0, 0, 0, 0, 0 },
              new int[] {  1, 1, 1 },
              new int[] {  -3, -2, -3, -2 },
              new int[] {  3, 2, 3, 2 },
              new int[] {  3, -2, -3, 2 },
              new int[] {  -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
              new int[] {  1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new int[] {  1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
              new int[] {  0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
              new int[] {  5 }
            };
            var answer = new int[][] {
              new int[] { -2, -1, 0, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
              new int[] { 2, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new int[] { 2, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new int[] { -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new int[] { -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new int[] { 0, 0, 0, 0, 0 },
              new int[] { 1, 1 },
              new int[] { -3, -2, -3, -2 },
              new int[] { 3, 3, 2 },
              new int[] { 3, -2, -3 },
              new int[] { -2, 88, 5, 3, 1, 15, -8, 2, -33 },
              new int[] { 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new int[] { -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
              new int[] { 0, 8, 15, 15, 15, -15, -15, -8, -3 },
              new int[] { }
            };
            var test = new int[answer.Length][];
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                test[i] = _main.Task3(input[i]);
            }
            // Assert
            Assert.AreNotEqual(input, test);
            for (int i = 0; i < answer.Length; i++)
            {
                if (answer[i] == null)
                {
                    Assert.IsNull(test[i]);
                    continue;
                }
                Assert.AreEqual(answer[i].Length, test[i].Length, $"Test {i}");
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], test[i][j], $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test04()
        {
            // Arrange
            var input = new double[][] {
              new double[] {  -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
              new double[] {  2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new double[] {  2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new double[] {  -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new double[] {  -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new double[] {  0, 0, 0, 0, 0 },
              new double[] {  1, 1, 1 },
              new double[] {  -3, -2, -3, -2 },
              new double[] {  3, 2, 3, 2 },
              new double[] {  3, -2, -3, 2 },
              new double[] {  -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
              new double[] {  1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new double[] {  1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
              new double[] {  0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
              new double[] {  5 }
            };
            var answer = new double[][] {
              new double[] { -3.28, -2.28, -1.28, -0.28, 0.72, 1.72, 1.72, 6.72, 3.72, 1.72, -0.28, -0.28, -0.28, 0.72, -8.28, 6.72, 6.72, -2.28, -1.28, -1.28, 3.72, -6.28, -9.28, 0.72, 1.72 },
              new double[] { -1.2, -2.2, -3.2, -2.2, -1.2, -0.2, -0.2, 4.8, 1.8, -0.2, -2.2, -2.2, -2.2, -1.2, 3.8, 4.8, 4.8, -2.2, -3.2, -3.2, 1.8, 1.8, 4.8, -1.2, -0.2 },
              new double[] { -1.56, -2.56, -2.56, -2.56, -1.56, -0.56, -0.56, 4.44, 1.44, -0.56, -2.56, -2.56, -2.56, -1.56, 3.44, 4.44, 4.44, -2.56, 0.44, 0.44, 1.44, 1.44, 4.44, -1.56, -0.56 },
              new double[] { 1.56, 2.56, 2.56, 2.56, 1.56, 0.56, 0.56, -4.44, -1.44, 0.56, 2.56, 2.56, 2.56, 1.56, -3.44, -4.44, -4.44, 2.56, -0.44, -0.44, -1.44, -1.44, -4.44, 1.56, 0.56 },
              new double[] { 1.2, 2.2, 3.2, 2.2, 1.2, 0.2, 0.2, -4.8, -1.8, 0.2, 2.2, 2.2, 2.2, 1.2, -3.8, -4.8, -4.8, 2.2, 3.2, 3.2, -1.8, -1.8, -4.8, 1.2, 0.2 },
              new double[] { 0, 0, 0, 0, 0 },
              new double[] { 0, 0, 0 },
              new double[] { -0.5, 0.5, -0.5, 0.5 },
              new double[] { 0.5, -0.5, 0.5, -0.5 },
              new double[] { 3, -2, -3, 2 },
              new double[] { -9.2, 80.8, -2.2, -4.2, -6.2, -6.2, 7.8, -15.2, -5.2, -40.2 },
              new double[] { -1, 0, 1, -1, 0, 1, -1, -1, -1, 0, 1, 1, 1 },
              new double[] { 0.846154, -2.153846, -3.153846, -1.153846, 1.846154, 2.846154, 0.846154, 0.846154, -1.153846, -2.153846, -3.153846, 2.846154, 2.846154 },
              new double[] { -1.4, 6.6, 13.6, 13.6, 13.6, -16.4, -16.4, -9.4, 0.6, -4.4 },
              new double[] { 0 }
            };
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                _main.Task4(input[i]);
            }
            // Assert
            for (int i = 0; i < answer.Length; i++)
            {
                if (answer[i] == null)
                {
                    Assert.IsNull(input[i]);
                    continue;
                }
                Assert.AreEqual(answer[i].Length, input[i].Length);
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], input[i][j], E, $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test05()
        {
            // Arrange
            var input = new int[][] {
              new int[] {  -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
              new int[] {  2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new int[] {  2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new int[] {  -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new int[] {  -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new int[] {  0, 0, 0, 0, 0 },
              new int[] {  1, 1, 1 },
              new int[] {  -3, -2, -3, -2 },
              new int[] {  3, 2, 3, 2 },
              new int[] {  3, -2, -3, 2 },
              new int[] {  -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
              new int[] {  1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new int[] {  1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
              new int[] {  0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
              new int[] {  5 }
            };
            var answer = new int[] { 150, 438, -471, 438, 0, 0, 0, -26, 0, 0, 0, 6, 0, 0, 0 };
            var test = new int[answer.Length];
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                test[i] = _main.Task5(input[i], input[(i + 1) % input.Length]);
            }
            // Assert
            for (int i = 0; i < answer.Length; i++)
            {
                Assert.AreEqual(answer[i], test[i], $"Test {i} failed");
            }
        }
        [TestMethod]
        public void Test06()
        {
            // Arrange
            var input = new int[][] {
              new int[] {  -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
              new int[] {  2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new int[] {  2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new int[] {  -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new int[] {  -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new int[] {  0, 0, 0, 0, 0 },
              new int[] {  1, 1, 1 },
              new int[] {  -3, -2, -3, -2 },
              new int[] {  3, 2, 3, 2 },
              new int[] {  3, -2, -3, 2 },
              new int[] {  -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
              new int[] {  1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new int[] {  1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
              new int[] {  0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
              new int[] {  5 }
            };
            var answer = new int[][] {
              new int[] { 0, 1, 2, 3, 10, 11, 12, 14, 17, 18, 19, 21, 22 },
              new int[] { 0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 17, 18, 19, 23, 24 },
              new int[] { 0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 17, 23, 24 },
              new int[] { 7, 8, 14, 15, 16, 18, 19, 20, 21, 22 },
              new int[] { 7, 8, 14, 15, 16, 20, 21, 22 },
              new int[] { },
              new int[] { },
              new int[] { 0, 2 },
              new int[] { 1, 3 },
              new int[] { 1, 2 },
              new int[] { 0, 2, 3, 4, 5, 7, 8, 9 },
              new int[] { 0, 3, 6, 7, 8 },
              new int[] { 1, 2, 3, 8, 9, 10 },
              new int[] { 0, 5, 6, 7, 9 },
              new int[] { }
            };
            var test = new int[answer.Length][];
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                test[i] = _main.Task6(input[i]);
            }
            // Assert
            Assert.AreNotEqual(input, test);
            for (int i = 0; i < answer.Length; i++)
            {
                Assert.AreEqual(answer[i].Length, test[i].Length);
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], test[i][j], $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test07()
        {
            // Arrange
            var input = new int[][] {
              new int[] { -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
              new int[] { 2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new int[] { 2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new int[] { -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new int[] { -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new int[] { 0, 0, 0, 0, 0 },
              new int[] { 1, 1, 1 },
              new int[] { -3, -2, -3, -2 },
              new int[] { 3, 2, 3, 2 },
              new int[] { 3, -2, -3, 2 },
              new int[] { -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
              new int[] { 1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new int[] { 1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
              new int[] { 0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
              new int[] { 5 }
            };
            var answer = new int[] { 8, 7, 7, 7, 7, 5, 3, 2, 2, 3, 5, 7, 6, 5, 1 };
            var test = new int[answer.Length];
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                test[i] = _main.Task7(input[i]);
            }
            // Assert
            for (int i = 0; i < answer.Length; i++)
            {
                Assert.AreEqual(answer[i], test[i], $"Test {i} failed");
            }
        }
        [TestMethod]
        public void Test08()
        {
            // Arrange
            var input = new int[][] {
              new int[] {  -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
              new int[] {  2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new int[] {  2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new int[] {  -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new int[] {  -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new int[] {  0, 0, 0, 0, 0 },
              new int[] {  1, 1, 1 },
              new int[] {  -3, -2, -3, -2 },
              new int[] {  3, 2, 3, 2 },
              new int[] {  3, -2, -3, 2 },
              new int[] {  -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
              new int[] {  1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new int[] {  1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
              new int[] {  0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
              new int[] {  5 }
            };
            var answer = new int[][] {
              new int[] { -2, -2, -1, -1, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 8, 8, 5, 5, 3, 3, 1, 1, 1, 1, 1, 1, 2, 2, -7, -7, 8, 8, 8, 8, -1, -1, 0, 0, 0, 0, 5, 5, -5, -5, -8, -8, 2, 2, 3, 3 },
              new int[] { 2, 2, 1, 1, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 8, 8, 5, 5, 3, 3, 1, 1, 1, 1, 1, 1, 2, 2, 7, 7, 8, 8, 8, 8, 1, 1, 0, 0, 0, 0, 5, 5, 5, 5, 8, 8, 2, 2, 3, 3 },
              new int[] { 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 8, 8, 5, 5, 3, 3, 1, 1, 1, 1, 1, 1, 2, 2, 7, 7, 8, 8, 8, 8, 1, 1, 4, 4, 4, 4, 5, 5, 5, 5, 8, 8, 2, 2, 3, 3 },
              new int[] { -2, -2, -1, -1, -1, -1, -1, -1, -2, -2, -3, -3, -3, -3, -8, -8, -5, -5, -3, -3, -1, -1, -1, -1, -1, -1, -2, -2, -7, -7, -8, -8, -8, -8, -1, -1, -4, -4, -4, -4, -5, -5, -5, -5, -8, -8, -2, -2, -3, -3 },
              new int[] { -2, -2, -1, -1, 0, 0, -1, -1, -2, -2, -3, -3, -3, -3, -8, -8, -5, -5, -3, -3, -1, -1, -1, -1, -1, -1, -2, -2, -7, -7, -8, -8, -8, -8, -1, -1, 0, 0, 0, 0, -5, -5, -5, -5, -8, -8, -2, -2, -3, -3 },
              new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
              new int[] { 1, 1, 1, 1, 1, 1 },
              new int[] { -3, -3, -2, -2, -3, -3, -2, -2 },
              new int[] { 3, 3, 2, 2, 3, 3, 2, 2 },
              new int[] { 3, 3, -2, -2, -3, -3, 2, 2 },
              new int[] { -2, -2, 88, 88, 5, 5, 3, 3, 1, 1, 1, 1, 15, 15, -8, -8, 2, 2, -33, -33 },
              new int[] { 1, 1, 2, 2, 3, 3, 1, 1, 2, 2, 3, 3, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3 },
              new int[] { 1, 1, -2, -2, -3, -3, -1, -1, 2, 2, 3, 3, 1, 1, 1, 1, -1, -1, -2, -2, -3, -3, 3, 3, 3, 3 },
              new int[] { 0, 0, 8, 8, 15, 15, 15, 15, 15, 15, -15, -15, -15, -15, -8, -8, 2, 2, -3, -3 },
              new int[] { 5, 5 }
            };
            var test = new int[answer.Length][];
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                test[i] = _main.Task8(input[i]);
            }
            // Assert
            Assert.AreNotEqual(input, test);
            for (int i = 0; i < answer.Length; i++)
            {
                Assert.AreEqual(answer[i].Length, test[i].Length);
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], test[i][j], $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test09()
        {
            // Arrange
            var input = new int[][] {
              new int[] {  -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
              new int[] {  2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new int[] {  2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new int[] {  -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new int[] {  -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new int[] {  0, 0, 0, 0, 0 },
              new int[] {  1, 1, 1 },
              new int[] {  -3, -2, -3, -2 },
              new int[] {  3, 2, 3, 2 },
              new int[] {  3, -2, -3, 2 },
              new int[] {  -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
              new int[] {  1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new int[] {  1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
              new int[] {  0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
              new int[] {  5 }
            };
            var answer = new double[][] {
              new double[] { 0.375, 0.4375, 0.5, 0.5625, 0.625, 0.6875, 0.6875, 1, 0.8125, 0.6875, 0.5625, 0.5625, 0.5625, 0.625, 0.0625, 1, 1, 0.4375, 0.5, 0.5, 0.8125, 0.1875, 0, 0.625, 0.6875 },
              new double[] { 0.25, 0.125, 0, 0.125, 0.25, 0.375, 0.375, 1, 0.625, 0.375, 0.125, 0.125, 0.125, 0.25, 0.875, 1, 1, 0.125, 0, 0, 0.625, 0.625, 1, 0.25, 0.375 },
              new double[] { 0.142857, 0, 0, 0, 0.142857, 0.285714, 0.285714, 1, 0.571429, 0.285714, 0, 0, 0, 0.142857, 0.857143, 1, 1, 0, 0.428571, 0.428571, 0.571429, 0.571429, 1, 0.142857, 0.285714 },
              new double[] { 0.857143, 1, 1, 1, 0.857143, 0.714286, 0.714286, 0, 0.428571, 0.714286, 1, 1, 1, 0.857143, 0.142857, 0, 0, 1, 0.571429, 0.571429, 0.428571, 0.428571, 0, 0.857143, 0.714286 },
              new double[] { 0.75, 0.875, 1, 0.875, 0.75, 0.625, 0.625, 0, 0.375, 0.625, 0.875, 0.875, 0.875, 0.75, 0.125, 0, 0, 0.875, 1, 1, 0.375, 0.375, 0, 0.75, 0.625 },
              null,
              null,
              new double[] { 0, 1, 0, 1 },
              new double[] { 1, 0, 1, 0 },
              new double[] { 1, 0.166667, 0, 0.833333 },
              new double[] { 0.256198, 1, 0.31405, 0.297521, 0.280992, 0.280992, 0.396694, 0.206612, 0.289256, 0 },
              new double[] { 0, 0.5, 1, 0, 0.5, 1, 0, 0, 0, 0.5, 1, 1, 1 },
              new double[] { 0.666667, 0.166667, 0, 0.333333, 0.833333, 1, 0.666667, 0.666667, 0.333333, 0.166667, 0, 1, 1 },
              new double[] { 0.5, 0.766667, 1, 1, 1, 0, 0, 0.233333, 0.566667, 0.4 },
              null
            };
            var test = new double[answer.Length][];
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                test[i] = _main.Task9(input[i]);
            }
            // Assert
            for (int i = 0; i < answer.Length; i++)
            {
                if (answer[i] == null)
                {
                    Assert.IsNull(test[i]);
                    continue;
                }
                Assert.AreEqual(answer[i].Length, test[i].Length);
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], test[i][j], E, $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test10()
        {
            // Arrange
            var input = new int[][] {
              new int[] {  -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
              new int[] {  2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              new int[] {  2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              new int[] {  -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
              new int[] {  -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
              new int[] {  0, 0, 0, 0, 0 },
              new int[] {  1, 1, 1 },
              new int[] {  -3, -2, -3, -2 },
              new int[] {  3, 2, 3, 2 },
              new int[] {  3, -2, -3, 2 },
              new int[] {  -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
              new int[] {  1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
              new int[] {  1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
              new int[] {  0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
              new int[] {  5 }
            };
            var inputP = new int[] { 1, 2, 3, 4, 0, 0, -2, 2, 2, 2, 3, 3, 3, -8, 5 };
            var answer = new int[] { 12, 12, 12, -1, 23, 2, -1, -1, 1, 2, 6, 9, 11, 2, 0 };
            var test = new int[answer.Length];
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                test[i] = _main.Task10(input[i], inputP[i]);
            }
            // Assert
            for (int i = 0; i < answer.Length; i++)
            {
                Assert.AreEqual(answer[i], test[i], $"Test {i} failed");
            }
        }
        [TestMethod]
        public void Test11()
        {
            // Arrange
            var inputA = new int[] { 1, 2, 3, 1, 5, -6, 7, 8, 9, -10, -5, 3, 1, -1, 1 };
            var inputB = new int[] { 2, 3, 3, 8, 5, 3, 11, 11, 11, 5, 7, 8, -8, -5, -5 };
            var inputN = new int[] { 20, 30, 30, 8, 5, 30, 200, 200, 200, 200, -100, -10, 100, 100, -150 };
            var answer = new int[][]  {
                new int[] { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19 },
                new int[] { 2, 5, 8, 11, 14, 17, 20, 23, 26, 29 },
                new int[] { 3, 6, 9, 12, 15, 18, 21, 24, 27, 30 },
                new int[] { 1 },
                new int[] { 5 },
                new int[] { -6, -3, 0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30 },
                new int[] { 7, 18, 29, 40, 51, 62, 73, 84, 95, 106, 117, 128, 139, 150, 161, 172, 183, 194 },
                new int[] { 8, 19, 30, 41, 52, 63, 74, 85, 96, 107, 118, 129, 140, 151, 162, 173, 184, 195 },
                new int[] { 9, 20, 31, 42, 53, 64, 75, 86, 97, 108, 119, 130, 141, 152, 163, 174, 185, 196 },
                new int[] { -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200 },
                new int[] {  },
                new int[] {  },
                null,
                null,
                null
            };
            var test = new int[answer.Length][];
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                test[i] = _main.Task11(inputA[i], inputB[i], inputN[i]);
            }
            // Assert
            for (int i = 0; i < answer.Length; i++)
            {
                if (answer[i] == null)
                {
                    Assert.IsNull(test[i]);
                    continue;
                }
                Assert.AreEqual(answer[i].Length, test[i].Length, $"Test {i} failed");
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], test[i][j], $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test12()
        {
            // Arrange
            var input = new int[][] {
              /*00*/ new int[] {  1, 2, 3, 3, 5, 3, 1, 1, 1, 2, 5, 2, 3 },
              /*01*/ new int[] {  2, 1, 1, 2, 3, 3, 5, 3, 1, 1, 1, 2, 1, 5, 5, 2, 3 },
              /*02*/ new int[] {  2, 1, 1, 1, 2, 3, 3 },
              /*03*/ new int[] {  6, 6, 6, 0, 0, 6, 6 },
              /*04*/ new int[] {  1, 2, 3, 4, 5, 6 },
              /*05*/ new int[] {  0, 0, 0, 0, 0 },
              /*06*/ new int[] { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19 },
              /*07*/ new int[] { 2, 5, 0, 11, 0, 17, 0, 0, 0, 0 },
              /*08*/ new int[] { 3, 6, 9, 12, 15, 18, 21, 24, 27, 30},
              /*09*/ new int[] { 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71, 76, 81, 86, 91, 96 },
              /*10*/ new int[] {  2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
              /*11*/ new int[] {  2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
              /*12*/ new int[] {  1, 2, 0, 0, 0, 0 },
              /*13*/ new int[] { 3, 11, 19, 27, 0, 0, 0, 0, 67, 75, 83, 91, 99 },
              /*14*/ new int[] { 6 }
            };
            var answer = new int[][] {
              /*00*/ new int[] { 2, 3, 4 },
              /*01*/ new int[] { 13, 14, 15 },
              /*02*/ new int[] { 4, 5, 6 },
              /*03*/ new int[] { 0, 1, 2 },
              /*04*/ new int[] { 3, 4, 5 },
              /*05*/ new int[] { 0, 1, 2 },
              /*06*/ new int[] { 7, 8, 9 },
              /*07*/ new int[] { 3, 4, 5 },
              /*08*/ new int[] { 7, 8, 9 },
              /*09*/ new int[] { 17, 18, 19 },
              /*10*/ new int[] { 14, 15, 16 },
              /*11*/ new int[] { 14, 15, 16 },
              /*12*/ new int[] { 0, 1, 2 },
              /*13*/ new int[] { 10, 11, 12 },
              /*14*/ new int[] { 0 }
            };
            var test = new int[answer.Length][];
            // Act
            for (int i = 0; i < answer.Length; i++)
            {
                test[i] = _main.Task12(input[i]);
            }
            // Assert
            Assert.AreNotEqual(input, test);
            for (int i = 0; i < answer.Length; i++)
            {
                if (answer[i] == null)
                {
                    Assert.IsNull(test[i]);
                    continue;
                }
                Assert.AreEqual(answer[i].Length, test[i].Length);
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], test[i][j], $"Test {i} failed (index {j})");
                }
            }
        }
    }
}