using System.Linq;

namespace Lab4test
{
    [TestClass]
    public sealed class PurpleTest
    {
        Lab4.Purple _main = new Lab4.Purple();
        const double E = 0.0001;

        [TestMethod]
        public void Test01()
        {
            // Arrange
            var input = new double[][] {
                new double[] {  -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
                new double[] {  2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
                new double[] {  2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
                new double[] {  -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
                new double[] {  -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
                new double[] {  0, 0, 0, 0, 0 },
                new double[] {  1, 1, 1 },
                new double[] {  -3, -2, -3, -2 },
                new double[] {  3, 2, 3, 2 },
                new double[] {  3, -2, -3, 2 },
                new double[] {  -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
                new double[] {  1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
                new double[] {  1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
                new double[] {  0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
                new double[] {  5 }
            };
            var answer = new double[][] {
                new double[] { -2, -1, 0, 1, 2, 3, 3, 8, 1.28, 1.28, 1.28, 1.28, 1.28, 1.28, 1.28, 1.28, 1.28, 1.28, 1.28, 1.28, 1.28, 1.28, 1.28, 1.28, 1.28 },
                new double[] { 2, 1, 0, 1, 2, 3, 3, 8, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2 },
                new double[] { 2, 1, 1, 1, 2, 3, 3, 8, 3.56, 3.56, 3.56, 3.56, 3.56, 3.56, 3.56, 3.56, 3.56, 3.56, 3.56, 3.56, 3.56, 3.56, 3.56, 3.56, 3.56 },
                new double[] { -2, -1, -3.56, -3.56, -3.56, -3.56, -3.56, -3.56, -3.56, -3.56, -3.56, -3.56, -3.56, -3.56, -3.56, -3.56, -3.56, -3.56, -3.56, -3.56, -3.56, -3.56, -3.56, -3.56, -3.56 },
                new double[] { -2, -1, 0, -3.2, -3.2, -3.2, -3.2, -3.2, -3.2, -3.2, -3.2, -3.2, -3.2, -3.2, -3.2, -3.2, -3.2, -3.2, -3.2, -3.2, -3.2, -3.2, -3.2, -3.2, -3.2 },
                new double[] { 0, 0, 0, 0, 0 },
                new double[] { 1, 1, 1 },
                new double[] { -3, -2, -2.5, -2.5 },
                new double[] { 3, 2.5, 2.5, 2.5 },
                new double[] { 3, 0, 0, 0 },
                new double[] { -2, 88, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2, 7.2 },
                new double[] { 1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 },
                new double[] { 1, -2, -3, -1, 2, 3, 0.15384615384615385, 0.15384615384615385, 0.15384615384615385, 0.15384615384615385, 0.15384615384615385, 0.15384615384615385, 0.15384615384615385 },
                new double[] { 0, 8, 15, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4 },
                new double[] { 5 }
            };
            // Act
            for (int i = 0; i < input.Length; i++)
            {
                _main.Task1(input[i]);
            }
            // Assert
            for (int i = 0; i < input.Length; i++)
            {
                Assert.AreEqual(answer[i].Length, input[i].Length);
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], input[i][j], E, $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test02()
        {
            // Arrange
            var input = new int[][] {
                new int[] { -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
                new int[] { 2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
                new int[] { 2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
                new int[] { -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
                new int[] { -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
                new int[] { 0, 0, 0, 0, 0 },
                new int[] { 1, 1, 1 },
                new int[] { -3, -2, -3, -2 },
                new int[] { 3, 2, 3, 2 },
                new int[] { 3, -2, -3, 2 },
                new int[] { -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
                new int[] { 1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
                new int[] { 1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
                new int[] { 0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
                new int[] { 5 }
            };
            var answer = new (int[] even, int[] odd)[] {
                (new int[] { -2, 0, 2, 3, 5, 1, 1, -7, 8, 0, 5, -8, 3 }, new int[] { -1, 1, 3, 8, 3, 1, 2, 8, -1, 0, -5, 2 }),
                (new int[] { 2, 0, 2, 3, 5, 1, 1, 7, 8, 0, 5, 8, 3 }, new int[] { 1, 1, 3, 8, 3, 1, 2, 8, 1, 0, 5, 2 }),
                (new int[] { 2, 1, 2, 3, 5, 1, 1, 7, 8, 4, 5, 8, 3 }, new int[] { 1, 1, 3, 8, 3, 1, 2, 8, 1, 4, 5, 2 }),
                (new int[] { -2, -1, -2, -3, -5, -1, -1, -7, -8, -4, -5, -8, -3 }, new int[] { -1, -1, -3, -8, -3, -1, -2, -8, -1, -4, -5, -2 }),
                (new int[] { -2, 0, -2, -3, -5, -1, -1, -7, -8, 0, -5, -8, -3 }, new int[] { -1, -1, -3, -8, -3, -1, -2, -8, -1, 0, -5, -2 }),
                (new int[] { 0, 0, 0 }, new int[] { 0, 0 }),
                (new int[] { 1, 1 }, new int[] { 1 }),
                (new int[] { -3, -3 }, new int[] { -2, -2 }),
                (new int[] { 3, 3 }, new int[] { 2, 2 }),
                (new int[] { 3, -3 }, new int[] { -2, 2 }),
                (new int[] { -2, 5, 1, 15, 2 }, new int[] { 88, 3, 1, -8, -33 }),
                (new int[] { 1, 3, 2, 1, 1, 3, 3 }, new int[] { 2, 1, 3, 1, 2, 3 }),
                (new int[] { 1, -3, 2, 1, -1, -3, 3 }, new int[] { -2, -1, 3, 1, -2, 3 }),
                (new int[] { 0, 15, 15, -15, 2 }, new int[] { 8, 15, -15, -8, -3 }),
                (new int[] { 5 }, new int[] { })
            };
            var test = new (int[] even, int[] odd)[answer.Length];
            // Act
            for (int i = 0; i < input.Length; i++)
            {
                test[i] = _main.Task2(input[i]);
            }
            // Assert
            for (int i = 0; i < input.Length; i++)
            {
                Assert.AreEqual(answer[i].even.Length, test[i].even.Length);
                for (int j = 0; j < answer[i].even.Length; j++)
                {
                    Assert.AreEqual(answer[i].even[j], test[i].even[j], $"Test {i} failed (index {j})");
                }
                Assert.AreEqual(answer[i].odd.Length, test[i].odd.Length);
                for (int j = 0; j < answer[i].odd.Length; j++)
                {
                    Assert.AreEqual(answer[i].odd[j], test[i].odd[j], $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test03()
        {
            // Arrange
            var input = new int[][] {
                new int[] { -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
                new int[] { 2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
                new int[] { 2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
                new int[] { -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
                new int[] { -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
                new int[] { 0, 0, 0, 0, 0 },
                new int[] { 1, 1, 1 },
                new int[] { -3, -2, -3, -2 },
                new int[] { 3, 2, 3, 2 },
                new int[] { 3, -2, -3, 2 },
                new int[] { -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
                new int[] { 1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
                new int[] { 1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
                new int[] { 0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
                new int[] { 5 }
            };
            var inputP = new int[] { 1, 2, 3, 4, 0, 2, -2, 2, 2, 1, 3, 3, 3, -8, 5 };
            var answer = new int[][] {
                new int[] { -2, -1, 0, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
                new int[] { 2, 1, 0, 1, 2, 3, 2, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
                new int[] { 2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 3, 4, 5, 5, 8, 2, 3 },
                new int[] { -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, 4, -4, -5, -5, -8, -2, -3 },
                new int[] { -2, -1, 0, -1, -2, -3, 0, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
                new int[] { 0, 2, 0, 0, 0, 0 },
                new int[] { 1, -2, 1, 1 },
                new int[] { -3, 2, -2, -3, -2 },
                new int[] { 3, 2, 2, 3, 2 },
                new int[] { 3, -2, 1, -3, 2 },
                new int[] { -2, 88, 5, 3, 3, 1, 1, 15, -8, 2, -33 },
                new int[] { 1, 2, 3, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
                new int[] { 1, 3, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
                new int[] { 0, 8, 15, 15, 15, -15, -15, -8, 2, -8, -3 },
                new int[] { 5, 5 }
            };
            var test = new int[answer.Length][];
            // Act
            for (int i = 0; i < input.Length; i++)
            {
                test[i] = _main.Task3(input[i], inputP[i]);
            }
            // Assert
            Assert.AreNotEqual(input, test);
            for (int i = 0; i < input.Length; i++)
            {
                if (answer[i] == null)
                {
                    Assert.IsNull(test[i]);
                    continue;
                }
                Assert.AreEqual(answer[i].Length, test[i].Length);
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], test[i][j], $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test04()
        {
            // Arrange
            var input = new int[][] {
                new int[] { -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
                new int[] { 2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
                new int[] { 2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
                new int[] { -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
                new int[] { -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
                new int[] { 0, 0, 0, 0, 0 },
                new int[] { 1, 1, 1 },
                new int[] { -3, -2, -3, -2 },
                new int[] { 3, 2, 3, 2 },
                new int[] { 3, -2, -3, 2 },
                new int[] { -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
                new int[] { 1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
                new int[] { 1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
                new int[] { 0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
                new int[] { 5 }
            };
            var answer = new int[][] {
                new int[] { 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 8, 8, 0, 0, 5, 2, 3, -2, -1, -7, -1, -5, -8 },
                new int[] { 2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
                new int[] { 2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
                new int[] { -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
                new int[] { 0, 0, 0, -2, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -5, -5, -8, -2, -3 },
                new int[] { 0, 0, 0, 0, 0 },
                new int[] { 1, 1, 1 },
                new int[] { -3, -2, -3, -2 },
                new int[] { 3, 2, 3, 2 },
                new int[] { 3, 2, -2, -3 },
                new int[] { 88, 5, 3, 1, 1, 15, 2, -2, -8, -33 },
                new int[] { 1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
                new int[] { 1, 2, 3, 1, 1, 3, 3, -2, -3, -1, -1, -2, -3 },
                new int[] { 0, 8, 15, 15, 15, 2, -15, -15, -8, -3 },
                new int[] { 5 }
            };
            // Act
            for (int i = 0; i < input.Length; i++)
            {
                _main.Task4(input[i]);
            }
            // Assert
            for (int i = 0; i < input.Length; i++)
            {
                if (answer[i] == null)
                {
                    Assert.IsNull(input[i]);
                    continue;
                }
                Assert.AreEqual(answer[i].Length, input[i].Length);
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], input[i][j], E, $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test05()
        {
            // Arrange
            var input = new int[][] {
                new int[] { -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
                new int[] { 2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
                new int[] { 2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
                new int[] { -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
                new int[] { -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
                new int[] { 0, 0, 0, 0, 0 },
                new int[] { 1, 1, 1 },
                new int[] { -3, -2, -3, -2 },
                new int[] { 3, 2, 3, 2 },
                new int[] { 3, -2, -3, 2 },
                new int[] { -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
                new int[] { 1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
                new int[] { 1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
                new int[] { 0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
                new int[] { 5 }
            };
            var inputk = new int[] { 1, 2, 3, 4, 0, 2, 2, 2, 2, 1, 3, 3, 3, 8, 5 };
            var answer = new int[][] {
                new int[] { -2, 2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
                new int[] { 2, 1, 2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
                new int[] { 2, 1, 1, -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
                new int[] { -2, -1, -1, -1, -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
                new int[] { 0, 0, 0, 0, 0, -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
                new int[] { 0, 0, 1, 1, 1, 0, 0, 0 },
                new int[] { 1, 1, -3, -2, -3, -2, 1 },
                new int[] { -3, -2, 3, 2, 3, 2, -3, -2 },
                new int[] { 3, 2, 3, -2, -3, 2, 3, 2 },
                new int[] { 3, -2, 88, 5, 3, 1, 1, 15, -8, 2, -33, -2, -3, 2 },
                new int[] { -2, 88, 5, 1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3, 3, 1, 1, 15, -8, 2, -33 },
                new int[] { 1, 2, 3, 1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
                new int[] { 1, -2, -3, 0, 8, 15, 15, 15, -15, -15, -8, 2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
                new int[] { 0, 8, 15, 15, 15, -15, -15, -8, 5, 2, -3 },
                new int[] { 5 }
            };
            var test = new int[answer.Length][];
            // Act
            for (int i = 0; i < input.Length; i++)
            {
                test[i] = _main.Task5(input[i], input[(i + 1) % input.Length], inputk[i]);
            }
            // Assert
            Assert.AreNotEqual(input, test);
            for (int i = 0; i < input.Length; i++)
            {
                Assert.AreEqual(answer[i].Length, test[i].Length);
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], test[i][j], E, $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test06()
        {
            // Arrange
            var input = new int[][] {
                new int[] { -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
                new int[] { 2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
                new int[] { 2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
                new int[] { -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
                new int[] { -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
                new int[] { 0, 0, 0, 0, 0 },
                new int[] { 1, 1, 1 },
                new int[] { -3, -2, -3, -2 },
                new int[] { 3, 2, 3, 2 },
                new int[] { 3, -2, -3, 2 },
                new int[] { -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
                new int[] { 1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
                new int[] { 1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
                new int[] { 0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
                new int[] { 5 }
            };
            var answer = new (int[] sum, int[] dif)[] {
                (new int[] { 0, 0, 0, 2, 4, 6, 6, 16, 10, 6, 2, 2, 2, 4, 0, 16, 16, 0, 0, 0, 10, 0, 0, 4, 6 }, new int[] { -4, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -14, 0, 0, -2, 0, 0, 0, -10, -16, 0, 0 }),
                (new int[] { 4, 2, 1, 2, 4, 6, 6, 16, 10, 6, 2, 2, 2, 4, 14, 16, 16, 2, 4, 4, 10, 10, 16, 4, 6 }, new int[] { 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, -4, 0, 0, 0, 0, 0 }),
                (new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new int[] { 4, 2, 2, 2, 4, 6, 6, 16, 10, 6, 2, 2, 2, 4, 14, 16, 16, 2, 8, 8, 10, 10, 16, 4, 6 }),
                (new int[] { -4, -2, -1, -2, -4, -6, -6, -16, -10, -6, -2, -2, -2, -4, -14, -16, -16, -2, -4, -4, -10, -10, -16, -4, -6 }, new int[] { 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, -4, 0, 0, 0, 0, 0 }),
                (null, null),
                (null, null),
                (null, null),
                (new int[] { 0, 0, 0, 0 }, new int[] { -6, -4, -6, -4 }),
                (new int[] { 6, 0, 0, 4 }, new int[] { 0, 4, 6, 0 }),
                (null, null),
                (null, null),
                (new int[] { 2, 0, 0, 0, 4, 6, 2, 2, 0, 0, 0, 6, 6 }, new int[] { 0, 4, 6, 2, 0, 0, 0, 0, 2, 4, 6, 0, 0 }),
                (null, null),
                (null, null),
                (null, null)
            };
            var test = new (int[] sum, int[] dif)[answer.Length];
            // Act
            for (int i = 0; i < input.Length; i++)
            {
                test[i] = _main.Task6(input[i], input[(i + 1) % input.Length]);
            }
            // Assert
            for (int i = 0; i < input.Length; i++)
            {
                if (answer[i].sum == null)
                {
                    Assert.IsNull(test[i].sum);
                    Assert.IsNull(test[i].dif);
                    continue;
                }
                Assert.AreEqual(answer[i].sum.Length, test[i].sum.Length);
                for (int j = 0; j < answer[i].sum.Length; j++)
                {
                    Assert.AreEqual(answer[i].sum[j], test[i].sum[j], $"Test {i} failed (index {j})");
                }
                Assert.AreEqual(answer[i].dif.Length, test[i].dif.Length);
                for (int j = 0; j < answer[i].dif.Length; j++)
                {
                    Assert.AreEqual(answer[i].dif[j], test[i].dif[j], $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test07()
        {
            // Arrange
            var input = new int[][] {
                new int[] { -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
                new int[] { 2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
                new int[] { 2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
                new int[] { -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
                new int[] { -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
                new int[] { 0, 0, 0, 0, 0 },
                new int[] { 1, 1, 1 },
                new int[] { -3, -2, -3, -2 },
                new int[] { 3, 2, 3, 2 },
                new int[] { 3, -2, -3, 2 },
                new int[] { -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
                new int[] { 1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
                new int[] { 1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
                new int[] { 0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
                new int[] { 5 }
            };
            var answer = new double[][] {
                new double[] { -0.25, -0.125, 0, 0.125, 0.25, 0.375, 0.375, 1, 0.625, 0.375, 0.125, 0.125, 0.125, 0.25, -0.875, 1, 1, -0.125, 0, 0, 0.625, -0.625, -1, 0.25, 0.375 },
                new double[] { -0.5, -0.75, -1, -0.75, -0.5, -0.25, -0.25, 1, 0.25, -0.25, -0.75, -0.75, -0.75, -0.5, 0.75, 1, 1, -0.75, -1, -1, 0.25, 0.25, 1, -0.5, -0.25 },
                new double[] { -0.7142857142857143, -1, -1, -1, -0.7142857142857143, -0.4285714285714286, -0.4285714285714286, 1, 0.1428571428571428, -0.4285714285714286, -1, -1, -1, -0.7142857142857143, 0.7142857142857142, 1, 1, -1, -0.1428571428571429, -0.1428571428571429, 0.1428571428571428, 0.1428571428571428, 1, -0.7142857142857143, -0.4285714285714286 },
                new double[] { 0.7142857142857142, 1, 1, 1, 0.7142857142857142, 0.4285714285714286, 0.4285714285714286, -1, -0.1428571428571429, 0.4285714285714286, 1, 1, 1, 0.7142857142857142, -0.7142857142857143, -1, -1, 1, 0.1428571428571428, 0.1428571428571428, -0.1428571428571429, -0.1428571428571429, -1, 0.7142857142857142, 0.4285714285714286 },
                new double[] { 0.5, 0.75, 1, 0.75, 0.5, 0.25, 0.25, -1, -0.25, 0.25, 0.75, 0.75, 0.75, 0.5, -0.75, -1, -1, 0.75, 1, 1, -0.25, -0.25, -1, 0.5, 0.25 },
                null,
                null,
                new double[] { -1, 1, -1, 1 },
                new double[] { 1, -1, 1, -1 },
                new double[] { 1, -0.6666666666666667, -1, 0.6666666666666667 },
                new double[] { -0.487603305785124, 1, -0.371900826446281, -0.4049586776859504, -0.4380165289256198, -0.4380165289256198, -0.20661157024793386, -0.5867768595041323, -0.42148760330578516, -1 },
                new double[] { -1, 0, 1, -1, 0, 1, -1, -1, -1, 0, 1, 1, 1 },
                new double[] { 0.33333333333333326, -0.6666666666666667, -1, -0.33333333333333337, 0.6666666666666667, 1, 0.33333333333333326, 0.33333333333333326, -0.33333333333333337, -0.6666666666666667, -1, 1, 1 },
                new double[] { 0, 0.5333333333333334, 1, 1, 1, -1, -1, -0.5333333333333333, 0.1333333333333333, -0.19999999999999996 },
                null
            };
            var test = new double[answer.Length][];
            // Act
            for (int i = 0; i < input.Length; i++)
            {
                test[i] = _main.Task7(input[i]);
            }
            // Assert
            for (int i = 0; i < input.Length; i++)
            {
                if (answer[i] == null)
                {
                    Assert.IsNull(test[i]);
                    continue;
                }
                Assert.AreEqual(answer[i].Length, test[i].Length);
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], test[i][j], E, $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test08()
        {
            // Arrange
            var input = new int[][] {
                new int[] { -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
                new int[] { 2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
                new int[] { 2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
                new int[] { -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
                new int[] { -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
                new int[] { 0, 0, 0, 0, 0 },
                new int[] { 1, 1, 1 },
                new int[] { -3, -2, -3, -2 },
                new int[] { 3, 2, 3, 2 },
                new int[] { 3, -2, -3, 2 },
                new int[] { -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
                new int[] { 1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
                new int[] { 1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
                new int[] { 0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
                new int[] { 5 }
            };
            var answer = new int[][] {
                new int[] { 8, 8, 8, 8, 8, 8, 8, 7, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, -1, -1, -2, -5, -7, -8 },
                new int[] { 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 5, 5, 5, 5, 5, 5, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0 },
                new int[] { 8, 8, 8, 8, 7, 5, 5, 5, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -2, -2, -3, -3, -3, -3, -4, -4, -5, -5, -5, -7, -8, -8, -8, -8 },
                new int[] { 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3, -3, -3, -3, -4, -4, -5, -5, -5, -5, -5, -5, -7, -7, -8, -8, -8, -8, -8, -8, -8, -8 },
                new int[] { 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -2, -2, -2, -2, -3, -3, -3, -3, -5, -5, -5, -7, -8, -8, -8, -8 },
                new int[] { 1, 1, 1, 0, 0, 0, 0, 0 },
                new int[] { 1, 1, 1, -2, -2, -3, -3 },
                new int[] { 3, 3, 2, 2, -2, -2, -3, -3 },
                new int[] { 3, 3, 3, 2, 2, 2, -2, -3 },
                new int[] { 88, 15, 5, 3, 3, 2, 2, 1, 1, -2, -2, -3, -8, -33 },
                new int[] { 88, 15, 5, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, -2, -8, -33 },
                new int[] { 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -2, -2, -3, -3 },
                new int[] { 15, 15, 15, 8, 3, 3, 3, 2, 2, 1, 1, 1, 0, -1, -1, -2, -2, -3, -3, -3, -8, -15, -15 },
                new int[] { 15, 15, 15, 8, 5, 2, 0, -3, -8, -15, -15 },
                new int[] { 8, 8, 8, 5, 5, 5, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, -1, -1, -2, -5, -7, -8 }
            };
            var test = new int[answer.Length][];
            // Act
            for (int i = 0; i < input.Length; i++)
            {
                test[i] = _main.Task8(input[i], input[(i + 1) % input.Length]);
            }
            // Assert
            Assert.AreNotEqual(input, test);
            for (int i = 0; i < input.Length; i++)
            {
                Assert.AreEqual(answer[i].Length, test[i].Length);
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], test[i][j], $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test09()
        {
            // Arrange
            var input = new int[][] {
                new int[] { -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
                new int[] { 2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
                new int[] { 2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
                new int[] { -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
                new int[] { -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
                new int[] { 0, 0, 0, 0, 0 },
                new int[] { 1, 1, 1 },
                new int[] { -3, -2, -3, -2 },
                new int[] { 3, 2, 3, 2 },
                new int[] { 3, -2, -3, 2 },
                new int[] { -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
                new int[] { 1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
                new int[] { 1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
                new int[] { 0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
                new int[] { 5 }
            };
            var answer = new int[][] {
                new int[] { 0, 0, 5, -5, -8, 2, 3, -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1 },
                new int[] { 0, 0, 5, 5, 8, 2, 3, 2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1 },
                new int[] { 4, 4, 5, 5, 8, 2, 3, 2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1 },
                new int[] { -3, -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2 },
                new int[] { -2, -3, -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8 },
                new int[] { 0, 0, 0, 0, 0 },
                new int[] { 1, 1, 1 },
                new int[] { -2, -3, -2, -3 },
                new int[] { 3, 2, 3, 2 },
                new int[] { 3, -2, -3, 2 },
                new int[] { -33, -2, 88, 5, 3, 1, 1, 15, -8, 2 },
                new int[] { 3, 3, 1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3 },
                new int[] { -1, -2, -3, 3, 3, 1, -2, -3, -1, 2, 3, 1, 1 },
                new int[] { 2, -3, 0, 8, 15, 15, 15, -15, -15, -8 },
                new int[] { 5 }
            };
            // Act
            for (int i = 0; i < input.Length; i++)
            {
                _main.Task9(input[i]);
            }
            // Assert
            for (int i = 0; i < input.Length; i++)
            {
                Assert.AreEqual(answer[i].Length, input[i].Length);
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], input[i][j], E, $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test10()
        {
            // Arrange
            var input = new int[][] {
                new int[] { -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
                new int[] { 2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
                new int[] { 2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
                new int[] { -2, -1, -1, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
                new int[] { -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
                new int[] { 0, 0, 0, 0, 0 },
                new int[] { 1, 1, 1 },
                new int[] { -3, -2, -3, -2 },
                new int[] { 3, 2, 3, 2 },
                new int[] { 3, -2, -3, 2 },
                new int[] { -2, 88, 5, 3, 1, 1, 15, -8, 2, -33 },
                new int[] { 1, 2, 3, 1, 2, 3, 1, 1, 1, 2, 3, 3, 3 },
                new int[] { 1, -2, -3, -1, 2, 3, 1, 1, -1, -2, -3, 3, 3 },
                new int[] { 0, 8, 15, 15, 15, -15, -15, -8, 2, -3 },
                new int[] { 5 }
            };
            var inputN = new int[] { 1, 2, 3, 5, 0, 2, 2, 2, 2, 1, 3, 3, 3, 8, 5 };
            var answer = new int[][] {
                new int[] { -2, -1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, -7, 8, 8, -1, 0, 0, 5, -5, -8, 2, 3 },
                new int[] { 2, 1, 2, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
                new int[] { 2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
                new int[] { -2, -1, -1, -1, -2, -1, -1, -1, -2, -3, -1, -1, -1, -2, -7, -8, -8, -1, -4, -4, -5, -5, -8, -2, -3 },
                new int[] { -2, -1, 0, -1, -2, -3, -3, -8, -5, -3, -1, -1, -1, -2, -7, -8, -8, -1, 0, 0, -5, -5, -8, -2, -3 },
                new int[] { 0, 0, 0, 0, 0 },
                new int[] { 1, 1, 1 },
                new int[] { -3, -2, -3, -2 },
                new int[] { 3, 2, 3, 2 },
                new int[] { 3, -2, -3, 2 },
                new int[] { -2, 88, 5, 88, -2, 1, 15, -8, 2, -33 },
                new int[] { 1, 2, 3, 2, 1, 3, 1, 1, 1, 2, 3, 3, 3 },
                new int[] { 1, -2, -3, -2, 1, 3, 1, 1, -1, -2, -3, 3, 3 },
                new int[] { 0, 8, 15, 15, 15, -15, -15, -8, -15, -15 },
                new int[] { 5 }
            };
            // Act
            for (int i = 0; i < input.Length; i++)
            {
                _main.Task10(input[i], inputN[i]);
            }
            // Assert
            for (int i = 0; i < input.Length; i++)
            {
                Assert.AreEqual(answer[i].Length, input[i].Length);
                for (int j = 0; j < answer[i].Length; j++)
                {
                    Assert.AreEqual(answer[i][j], input[i][j], E, $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test11()
        {
            // Arrange
            var inputA = new double[] { 1, 2, 3, 3, 1, 5, 6, 7, 8, 9, 10, 5, 3, 1, 1, 1 };
            var inputB = new double[] { 2, 3, 3, 3, 8, 5, 3, 11, 11, 11, 5, 7, 8, 8, 5, 5 };
            var inputN = new int[] { 20, 30, 3, 1, 8, 5, 30, 200, 200, 200, 2, 100, 100, 100, 100, 150 };
            var answer = new (double[] X, double[] Y)[] {
                (new double[] { 1.5789473684210527 }, new double[] { 1.5707439651227684 }),
                (new double[] {  }, new double[] {  }),
                (null, null),
                (new double[] {  }, new double[] {  }),
                (new double[] { 2, 5 }, new double[] { 1.402448017104221, -4.510959187852466 }),
                (null, null),
                (null, null),
                (new double[] { 7.844221105527638 }, new double[] { 7.853607830667129 }),
                (new double[] {  }, new double[] {  }),
                (new double[] {  }, new double[] {  }),
                (null, null),
                (new double[] {  }, new double[] {  }),
                (new double[] { 4.717171717171717, 7.848484848484849 }, new double[] { -4.712335047081263, 7.853863036978309 }),
                (new double[] { 1.5656565656565657, 4.747474747474747, 7.858585858585858 }, new double[] { 1.5707756241229043, -4.709474381242655, 7.853898353762941 }),
                (new double[] { 1.5656565656565657, 4.717171717171718 }, new double[] { 1.5707756241229043, -4.712335047081263 }),
                (new double[] { 1.563758389261745, 4.704697986577181 }, new double[] { 1.5707575403719058, -4.712249760545925 }),
            };
            var test = new (double[] X, double[] Y)[answer.Length];
            // Act
            for (int i = 0; i < inputA.Length; i++)
            {
                test[i] = _main.Task11(inputA[i], inputB[i], inputN[i]);
            }
            // Assert
            for (int i = 0; i < inputA.Length; i++)
            {
                if (answer[i].X == null)
                {
                    Assert.IsNull(test[i].X);
                    Assert.IsNull(test[i].Y);
                    continue;
                }
                Assert.AreEqual(answer[i].X.Length, test[i].X.Length);
                for (int j = 0; j < answer[i].X.Length; j++)
                {
                    Assert.AreEqual(answer[i].X[j], test[i].X[j], E, $"Test {i} failed (index {j})");
                }
                Assert.AreEqual(answer[i].Y.Length, test[i].Y.Length);
                for (int j = 0; j < answer[i].Y.Length; j++)
                {
                    Assert.AreEqual(answer[i].Y[j], test[i].Y[j], E, $"Test {i} failed (index {j})");
                }
            }
        }
        [TestMethod]
        public void Test12()
        {
            // Arrange
            var input = new double[][] {
                new double[] { 1, 2, 3, 3, 5, 3, 1, 1, 1, 2, 5, 2, 3 },
                new double[] { 2, 1, 1, 2, 3, 3, 5, 3, 1, 1, 1, 2, 1, 5, 5, 2, 3 },
                new double[] { 2, 1, 1, 1, 2, 3, 3 },
                new double[] { 6, 6, 6, 0, 0, 6, 6 },
                new double[] { 1, 2, 3, 4, 5, 6 },
                new double[] { 0, 0, 0, 0, 0 },
                new double[] { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19 },
                new double[] { 2, 5, 0, 11, 0, 17, 0, 0, 0, 0 },
                new double[] { 3, 6, 9, 12, 15, 18, 21, 24, 27, 30},
                new double[] { 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71, 76, 81, 86, 91, 96 },
                new double[] { 2, 1, 0, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 0, 0, 5, 5, 8, 2, 3 },
                new double[] { 2, 1, 1, 1, 2, 3, 3, 8, 5, 3, 1, 1, 1, 2, 7, 8, 8, 1, 4, 4, 5, 5, 8, 2, 3 },
                new double[] { 1, 2, 0, 0, 0, 0 },
                new double[] { 3, 11, 19, 27, 0, 0, 0, 0, 67, 75, 83, 91, 99 },
                new double[] { 6 }
            };
            var answer = new (double[] bright, double[] normal, double[] dim)[] {
                (new double[] { 5, 5 }, new double[] { 3.7857142857142856, 3.7857142857142856, 3, 3, 3, 3, 2, 2, 2, 1.7857142857142858, 1.7857142857142858, 1.7857142857142858, 1.7857142857142858 }, new double[] { 1, 1, 1, 1 }),
                (new double[] { 5, 5, 5 }, new double[] { 3.75, 3.75, 3.75, 3, 3, 3, 3, 2, 2, 2, 2, 1.75, 1.75, 1.75, 1.75, 1.75, 1.75 }, new double[] { 1, 1, 1, 1, 1, 1 }),
                (new double[] {  }, new double[] { 3, 3, 2, 2, 1, 1, 1 }, new double[] {  }),
                (new double[] {  }, new double[] { 6, 6, 6, 6, 6, 3, 3 }, new double[] { 0, 0 }),
                (new double[] {  }, new double[] { 6, 5, 4, 3, 2.5, 2 }, new double[] { 1 }),
                (new double[] {  }, new double[] { 0, 0, 0, 0, 0 }, new double[] {  }),
                (new double[] {  }, new double[] { 19, 17, 15, 13, 11, 9, 7.5, 7, 6.5, 5 }, new double[] { 1, 3 }),
                (new double[] { 11, 17 }, new double[] { 10.25, 7.25, 5, 2, 1.75, 1.75, 1.75, 1.75, 1.75, 1.75 }, new double[] { 0, 0, 0, 0, 0, 0 }),
                (new double[] {  }, new double[] { 30, 27, 24, 21, 18, 15, 12.75, 12, 11.25, 9 }, new double[] { 3, 6 }),
                (new double[] {  }, new double[] { 96, 91, 86, 81, 76, 71, 66, 61, 56, 51, 46, 41, 41, 38.5, 36, 36, 33.5, 31, 31, 26 }, new double[] { 1, 6, 11, 16, 21 }),
                (new double[] { 8, 7, 8, 8, 8 }, new double[] { 5.590909090909091, 5.590909090909091, 5.590909090909091, 5.590909090909091, 5.090909090909091, 5, 5, 5, 3, 3, 3, 3, 2.090909090909091, 2.090909090909091, 2.090909090909091, 2.090909090909091, 2.090909090909091, 2.090909090909091, 2, 2, 2, 2, 1.5909090909090908, 1.5909090909090908, 1.5909090909090908 }, new double[] { 1, 0, 1, 1, 1, 1, 1, 0, 0 }),
                (new double[] { 8, 8, 8, 8 }, new double[] { 7, 5.785714285714286, 5.785714285714286, 5.785714285714286, 5.785714285714286, 5, 5, 5, 4, 4, 3, 3, 3, 3, 2.2857142857142856, 2.2857142857142856, 2.2857142857142856, 2.2857142857142856, 2.2857142857142856, 2.2857142857142856, 2.2857142857142856, 2, 2, 2, 2 }, new double[] { 1, 1, 1, 1, 1, 1, 1 }),
                (new double[] { 2 }, new double[] { 1.5, 1, 0.5, 0.5, 0.5, 0.5 }, new double[] { 0, 0, 0, 0 }),
                (new double[] { 75, 83, 91, 99 }, new double[] { 68.33333333333333, 67, 64.33333333333333, 60.33333333333333, 56.33333333333333, 27, 24.333333333333332, 20.333333333333332, 19, 18.833333333333332, 18.833333333333332, 18.833333333333332, 18.833333333333332 }, new double[] { 3, 11, 0, 0, 0, 0 }),
                (new double[] {  }, new double[] { 6 }, new double[] {  }),
};
            var test = new (double[] bright, double[] normal, double[] dim)[answer.Length];
            // Act
            for (int i = 0; i < input.Length; i++)
            {
                test[i] = _main.Task12(input[i]);
            }
            // Assert
            for (int i = 0; i < input.Length; i++)
            {
                Assert.AreEqual(answer[i].bright.Length, test[i].bright.Length);
                for (int j = 0; j < answer[i].bright.Length; j++)
                {
                    Assert.AreEqual(answer[i].bright[j], test[i].bright[j], E, $"Test {i} failed (index {j})");
                }
                Assert.AreEqual(answer[i].normal.Length, test[i].normal.Length);
                for (int j = 0; j < answer[i].normal.Length; j++)
                {
                    Assert.AreEqual(answer[i].normal[j], test[i].normal[j], E, $"Test {i} failed (index {j})");
                }
                Assert.AreEqual(answer[i].dim.Length, test[i].dim.Length);
                for (int j = 0; j < answer[i].dim.Length; j++)
                {
                    Assert.AreEqual(answer[i].dim[j], test[i].dim[j], E, $"Test {i} failed (index {j})");
                }
            }
        }
    }

}
